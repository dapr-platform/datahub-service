{
    "id": "65a9a92c-857d-494a-a13d-71aab9b000ac",
    "library_id": "c85a8151-5563-41e8-952a-f7e16a6b3bbe",
    "name_zh": "实时房情数据",
    "name_en": "hotel_info",
    "type": "api",
    "description": "",
    "created_at": "2025-09-24T12:18:34.713+08:00",
    "created_by": "admin",
    "updated_at": "2025-09-24T12:19:22.238833+08:00",
    "updated_by": "admin",
    "status": "draft",
    "is_table_created": false,
    "data_source_id": "f33496d3-5faa-4118-a6d3-2aeab006c3a7",
    "interface_config": {
        "body": "{\"hotelGroupCode\":\"GCBZ\",\",\"exec\":\"Kpi_Ihotel_Master_in\"}",
        "content_type": "application/json",
        "data_path": "data",
        "error_field": "error",
        "error_message_field": "message",
        "headers": {},
        "incremental_config": {
            "auto_increment": true,
            "enabled": false,
            "field_format": "2006-01-02T15:04:05Z",
            "field_type": "timestamp",
            "increment_field": "updated_at",
            "initial_value": "",
            "param_location": "query",
            "param_name": "since"
        },
        "incremental_field_format": "2006-01-02T15:04:05Z",
        "incremental_field_name": "updated_at",
        "incremental_field_type": "timestamp",
        "incremental_param_name": "since",
        "method": "POST",
        "page_field": "page",
        "page_size_field": "size",
        "pagination_default_size": 20,
        "pagination_enabled": false,
        "pagination_page_param": "page",
        "pagination_param_location": "query",
        "pagination_size_param": "size",
        "pagination_start_value": 1,
        "path_params": {},
        "query_params": {},
        "response_parser": {
            "data_extraction": "simple",
            "enabled": true,
            "error_handling": "standard",
            "pagination_support": false,
            "success_detection": "status_code"
        },
        "response_type": "json",
        "status_code_success": "200-299",
        "success_condition": "status_code",
        "success_field": "status",
        "success_value": "0",
        "sync_mode": "full",
        "total_field": "total",
        "url_pattern": "suffix",
        "url_suffix": "",
        "use_form_data": true
    },
    "parse_config": null,
    "table_fields_config": null,
    "basic_library": {
        "id": "c85a8151-5563-41e8-952a-f7e16a6b3bbe",
        "name_zh": "物联网",
        "name_en": "basic_things",
        "description": "",
        "created_at": "2025-09-22T09:51:50.878442+08:00",
        "created_by": "admin",
        "updated_at": "2025-09-22T09:51:50.878442+08:00",
        "updated_by": "admin",
        "status": "active"
    },
    "data_source": {
        "id": "f33496d3-5faa-4118-a6d3-2aeab006c3a7",
        "library_id": "c85a8151-5563-41e8-952a-f7e16a6b3bbe",
        "name": "testapi",
        "category": "api",
        "type": "http_with_auth",
        "status": "active",
        "connection_config": {
            "api_key": "",
            "api_key_header": "",
            "api_secret": "",
            "auth_type": "custom",
            "base_url": "http://localhost:8888/ipmsgroup/router",
            "client_id": "",
            "client_secret": "",
            "custom_map": {
                "appKey": "10001",
                "appSecret": "c9a4d3c4b2a1e6f0d3c4b2a1e6f0d3c4",
                "password": "123456",
                "session_refresh_interval": "11h",
                "usercode": "test2"
            },
            "grant_type": "client_credentials",
            "password": "",
            "scope": "",
            "script": "tttt",
            "script_enabled": false,
            "username": ""
        },
        "params_config": {
            "script": "// 绿云酒店接口脚本 - 只包含Run函数体内容\n// 这个内容将被包装在YaegiScriptExecutor的Run函数中执行\n\n// 全局配置常量\nconst (\n\tVERSION = \"3.0\"\n\tLOCALE  = \"zh_CN\"\n\tFORMAT  = \"json\"\n)\n\n// 辅助函数：从map中安全获取字符串值\ngetStringFromMap := func(m map[string]interface{}, key, defaultValue string) string {\n\tif value, exists := m[key]; exists {\n\t\tif strValue, ok := value.(string); ok {\n\t\t\treturn strValue\n\t\t}\n\t}\n\treturn defaultValue\n}\n\n// 辅助函数：生成签名\ngenerateSign := func(params map[string]interface{}, appSecret string) (string, error) {\n\t// 1. 获取所有参数的key并排序\n\tvar keys []string\n\tfor key := range params {\n\t\tif key != \"sign\" { // 排除sign参数本身\n\t\t\tkeys = append(keys, key)\n\t\t}\n\t}\n\tsort.Strings(keys)\n\n\t// 2. 构建签名字符串\n\tvar signStr strings.Builder\n\tsignStr.WriteString(appSecret)\n\n\tfor _, key := range keys {\n\t\tsignStr.WriteString(key)\n\t\tsignStr.WriteString(fmt.Sprintf(\"%v\", params[key]))\n\t}\n\n\tsignStr.WriteString(appSecret)\n\n\t// 3. SHA1加密并转换为大写\n\thash := sha1.Sum([]byte(signStr.String()))\n\treturn strings.ToUpper(hex.EncodeToString(hash[:])), nil\n}\n\n// 获取操作类型\noperationStr, ok := operation.(string)\nif !ok {\n\treturn nil, fmt.Errorf(\"operation参数类型错误\")\n}\n\nswitch operationStr {\ncase \"init\":\n\t// 初始化处理\n\tfmt.Println(\"绿云接口数据源初始化\")\n\treturn map[string]interface{}{\n\t\t\"success\": true,\n\t\t\"message\": \"初始化成功\",\n\t\t\"config\": map[string]interface{}{\n\t\t\t\"initialized\": true,\n\t\t\t\"init_time\":   time.Now().Format(time.RFC3339),\n\t\t},\n\t}, nil\n\ncase \"start\":\n\t// 启动处理 - 获取sessionId\n\tfmt.Println(\"绿云接口数据源启动，获取sessionId\")\n\t\n\t// 类型检查\n\tcredentialsMap, ok := credentials.(map[string]interface{})\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"credentials参数类型错误\")\n\t}\n\n\tbaseURLStr, ok := baseURL.(string)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"baseURL参数类型错误\")\n\t}\n\n\thttpPostFunc, ok := httpPost.(func(string, map[string]interface{}) (map[string]interface{}, error))\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"httpPost函数类型错误\")\n\t}\n\n\t// 准备登录参数\n\tparams := map[string]interface{}{\n\t\t\"v\":              VERSION,\n\t\t\"hotelGroupCode\": getStringFromMap(credentialsMap, \"hotel_group_code\", \"LYG\"),\n\t\t\"usercode\":       getStringFromMap(credentialsMap, \"username\", \"\"),\n\t\t\"password\":       getStringFromMap(credentialsMap, \"password\", \"\"),\n\t\t\"method\":         \"user.login\",\n\t\t\"local\":          LOCALE,\n\t\t\"format\":         FORMAT,\n\t\t\"appKey\":         getStringFromMap(credentialsMap, \"api_key\", \"\"),\n\t}\n\n\t// 生成签名\n\tappSecret := getStringFromMap(credentialsMap, \"api_secret\", \"\")\n\tsign, err := generateSign(params, appSecret)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"生成签名失败: %v\", err)\n\t}\n\tparams[\"sign\"] = sign\n\n\t// 执行POST请求\n\tresponse, err := httpPostFunc(baseURLStr, params)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"HTTP请求失败: %v\", err)\n\t}\n\n\t// 检查HTTP状态码\n\tif statusCode, exists := response[\"status_code\"]; exists {\n\t\tif code, ok := statusCode.(int); ok && code != 200 {\n\t\t\treturn nil, fmt.Errorf(\"HTTP请求失败，状态码: %d\", code)\n\t\t}\n\t}\n\n\t// 解析响应\n\tresultCode := getStringFromMap(response, \"resultCode\", \"\")\n\tif resultCode == \"0\" {\n\t\tsessionId := getStringFromMap(response, \"resultInfo\", \"\")\n\t\tif sessionId == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"响应中未包含sessionId\")\n\t\t}\n\n\t\t// 存储sessionId和相关信息\n\t\tif updateSessionDataFunc, ok := updateSessionData.(func(string, interface{})); ok {\n\t\t\tupdateSessionDataFunc(\"sessionId\", sessionId)\n\t\t\tupdateSessionDataFunc(\"loginTime\", time.Now().Format(time.RFC3339))\n\t\t\tupdateSessionDataFunc(\"lastRefreshTime\", time.Now().Format(time.RFC3339))\n\t\t}\n\n\t\tfmt.Printf(\"sessionId获取成功: %s\\n\", sessionId)\n\n\t\treturn map[string]interface{}{\n\t\t\t\"sessionId\":       sessionId,\n\t\t\t\"loginTime\":       time.Now().Format(time.RFC3339),\n\t\t\t\"lastRefreshTime\": time.Now().Format(time.RFC3339),\n\t\t}, nil\n\t} else {\n\t\tmessage := getStringFromMap(response, \"message\", \"\")\n\t\tif message == \"\" {\n\t\t\tmessage = getStringFromMap(response, \"resultMsg\", \"登录失败\")\n\t\t}\n\t\treturn nil, fmt.Errorf(\"登录失败: %s\", message)\n\t}\n\ncase \"execute\":\n\t// 执行处理 - 执行数据查询\n\tfmt.Println(\"执行绿云接口查询\")\n\t\n\t// 检查sessionId是否存在\n\tgetSessionDataFunc, ok := getSessionData.(func(string) interface{})\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"getSessionData函数类型错误\",\n\t\t}, nil\n\t}\n\n\tsessionIdRaw := getSessionDataFunc(\"sessionId\")\n\tif sessionIdRaw == nil {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"sessionId不存在，请先启动数据源\",\n\t\t}, nil\n\t}\n\n\tsessionId, ok := sessionIdRaw.(string)\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"sessionId类型错误\",\n\t\t}, nil\n\t}\n\n\t// 类型检查\n\tcredentialsMap, ok := credentials.(map[string]interface{})\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"credentials参数类型错误\",\n\t\t}, nil\n\t}\n\n\tbaseURLStr, ok := baseURL.(string)\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"baseURL参数类型错误\",\n\t\t}, nil\n\t}\n\n\thttpPostFunc, ok := httpPost.(func(string, map[string]interface{}) (map[string]interface{}, error))\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"httpPost函数类型错误\",\n\t\t}, nil\n\t}\n\n\t// 从请求参数中获取查询信息\n\trequestObj, ok := request.(map[string]interface{})\n\tif !ok {\n\t\trequestObj = make(map[string]interface{})\n\t}\n\n\tparamsObj, _ := requestObj[\"params\"].(map[string]interface{})\n\n\texec := \"Kpi_Ihotel_Room_Total\"\n\tif paramsObj != nil {\n\t\tif execParam, exists := paramsObj[\"exec\"]; exists {\n\t\t\tif execStr, ok := execParam.(string); ok {\n\t\t\t\texec = execStr\n\t\t\t}\n\t\t}\n\t}\n\n\thotelGroupCode := getStringFromMap(credentialsMap, \"hotel_group_code\", \"LYG\")\n\thotelCode := \"\"\n\tif paramsObj != nil {\n\t\thotelCode = getStringFromMap(paramsObj, \"hotel_code\", \"\")\n\t}\n\n\tqueryParams := hotelGroupCode\n\tif hotelCode != \"\" {\n\t\tqueryParams += \",\" + hotelCode\n\t}\n\n\trequestParams := map[string]interface{}{\n\t\t\"method\":         \"crs.kpi\",\n\t\t\"v\":              VERSION,\n\t\t\"format\":         FORMAT,\n\t\t\"local\":          LOCALE,\n\t\t\"appKey\":         getStringFromMap(credentialsMap, \"api_key\", \"\"),\n\t\t\"sessionId\":      sessionId,\n\t\t\"hotelGroupCode\": hotelGroupCode,\n\t\t\"hotelCode\":      hotelCode,\n\t\t\"exec\":           exec,\n\t\t\"params\":         queryParams,\n\t}\n\n\t// 生成签名\n\tappSecret := getStringFromMap(credentialsMap, \"api_secret\", \"\")\n\tsign, err := generateSign(requestParams, appSecret)\n\tif err != nil {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": fmt.Sprintf(\"生成签名失败: %v\", err),\n\t\t}, nil\n\t}\n\trequestParams[\"sign\"] = sign\n\n\t// 执行POST请求\n\tresponse, err := httpPostFunc(baseURLStr, requestParams)\n\tif err != nil {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": fmt.Sprintf(\"HTTP请求失败: %v\", err),\n\t\t}, nil\n\t}\n\n\t// 检查HTTP状态码\n\tif statusCode, exists := response[\"status_code\"]; exists {\n\t\tif code, ok := statusCode.(int); ok && code != 200 {\n\t\t\treturn map[string]interface{}{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": fmt.Sprintf(\"HTTP请求失败，状态码: %d\", code),\n\t\t\t}, nil\n\t\t}\n\t}\n\n\t// 解析响应\n\tresultCode := 0\n\tif rc, exists := response[\"resultCode\"]; exists {\n\t\tswitch v := rc.(type) {\n\t\tcase int:\n\t\t\tresultCode = v\n\t\tcase float64:\n\t\t\tresultCode = int(v)\n\t\tcase string:\n\t\t\tif v == \"0\" {\n\t\t\t\tresultCode = 0\n\t\t\t} else {\n\t\t\t\tresultCode = -1\n\t\t\t}\n\t\t}\n\t}\n\n\tif resultCode == 0 {\n\t\tdata, _ := response[\"result\"]\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": true,\n\t\t\t\"data\":    data,\n\t\t\t\"message\": getStringFromMap(response, \"resultMsg\", \"查询成功\"),\n\t\t\t\"metadata\": map[string]interface{}{\n\t\t\t\t\"exec\":      exec,\n\t\t\t\t\"params\":    queryParams,\n\t\t\t\t\"queryTime\": time.Now().Format(time.RFC3339),\n\t\t\t},\n\t\t}, nil\n\t} else {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": getStringFromMap(response, \"resultMsg\", \"查询失败\"),\n\t\t\t\"metadata\": map[string]interface{}{\n\t\t\t\t\"resultCode\": resultCode,\n\t\t\t},\n\t\t}, nil\n\t}\n\ncase \"refresh\":\n\t// 刷新处理 - 刷新sessionId\n\tfmt.Println(\"绿云接口数据源刷新sessionId\")\n\t\n\tgetSessionDataFunc, ok := getSessionData.(func(string) interface{})\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"getSessionData函数类型错误\",\n\t\t}, nil\n\t}\n\n\tsessionIdRaw := getSessionDataFunc(\"sessionId\")\n\tif sessionIdRaw == nil {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"sessionId不存在，无法刷新\",\n\t\t}, nil\n\t}\n\n\tsessionId, ok := sessionIdRaw.(string)\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"sessionId类型错误\",\n\t\t}, nil\n\t}\n\n\t// 类型检查\n\tcredentialsMap, ok := credentials.(map[string]interface{})\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"credentials参数类型错误\",\n\t\t}, nil\n\t}\n\n\tbaseURLStr, ok := baseURL.(string)\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"baseURL参数类型错误\",\n\t\t}, nil\n\t}\n\n\thttpPostFunc, ok := httpPost.(func(string, map[string]interface{}) (map[string]interface{}, error))\n\tif !ok {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": \"httpPost函数类型错误\",\n\t\t}, nil\n\t}\n\n\t// 刷新sessionId\n\tparams := map[string]interface{}{\n\t\t\"v\":         VERSION,\n\t\t\"sessionId\": sessionId,\n\t\t\"method\":    \"user.refresh\",\n\t\t\"local\":     LOCALE,\n\t\t\"format\":    FORMAT,\n\t\t\"appKey\":    getStringFromMap(credentialsMap, \"api_key\", \"\"),\n\t}\n\n\t// 生成签名\n\tappSecret := getStringFromMap(credentialsMap, \"api_secret\", \"\")\n\tsign, err := generateSign(params, appSecret)\n\tif err != nil {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": fmt.Sprintf(\"生成签名失败: %v\", err),\n\t\t}, nil\n\t}\n\tparams[\"sign\"] = sign\n\n\t// 执行POST请求\n\tresponse, err := httpPostFunc(baseURLStr, params)\n\tif err != nil {\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": fmt.Sprintf(\"HTTP请求失败: %v\", err),\n\t\t}, nil\n\t}\n\n\t// 检查HTTP状态码\n\tif statusCode, exists := response[\"status_code\"]; exists {\n\t\tif code, ok := statusCode.(int); ok && code != 200 {\n\t\t\treturn map[string]interface{}{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": fmt.Sprintf(\"HTTP请求失败，状态码: %d\", code),\n\t\t\t}, nil\n\t\t}\n\t}\n\n\t// 解析响应\n\tresultCode := getStringFromMap(response, \"resultCode\", \"\")\n\tif resultCode == \"0\" {\n\t\tnewSessionId := getStringFromMap(response, \"resultInfo\", \"\")\n\t\tif newSessionId == \"\" {\n\t\t\tnewSessionId = sessionId // 如果没有返回新的sessionId，使用原来的\n\t\t}\n\n\t\t// 更新sessionId和相关信息\n\t\tif updateSessionDataFunc, ok := updateSessionData.(func(string, interface{})); ok {\n\t\t\tupdateSessionDataFunc(\"sessionId\", newSessionId)\n\t\t\tupdateSessionDataFunc(\"lastRefreshTime\", time.Now().Format(time.RFC3339))\n\t\t}\n\n\t\tfmt.Printf(\"sessionId刷新成功: %s\\n\", newSessionId)\n\n\t\treturn map[string]interface{}{\n\t\t\t\"success\":         true,\n\t\t\t\"sessionId\":       newSessionId,\n\t\t\t\"lastRefreshTime\": time.Now().Format(time.RFC3339),\n\t\t}, nil\n\t} else {\n\t\tmessage := getStringFromMap(response, \"message\", \"\")\n\t\tif message == \"\" {\n\t\t\tmessage = getStringFromMap(response, \"resultMsg\", \"刷新失败\")\n\t\t}\n\t\treturn map[string]interface{}{\n\t\t\t\"success\": false,\n\t\t\t\"message\": fmt.Sprintf(\"刷新失败: %s\", message),\n\t\t}, nil\n\t}\n\ncase \"stop\":\n\t// 停止处理 - 退出sessionId\n\tfmt.Println(\"绿云接口数据源停止，退出sessionId\")\n\t\n\tgetSessionDataFunc, ok := getSessionData.(func(string) interface{})\n\tif ok {\n\t\tsessionIdRaw := getSessionDataFunc(\"sessionId\")\n\t\tif sessionIdRaw != nil {\n\t\t\tif sessionId, ok := sessionIdRaw.(string); ok {\n\t\t\t\t// 类型检查\n\t\t\t\tcredentialsMap, ok := credentials.(map[string]interface{})\n\t\t\t\tif !ok {\n\t\t\t\t\treturn map[string]interface{}{\n\t\t\t\t\t\t\"success\": true,\n\t\t\t\t\t\t\"message\": \"停止成功，但退出sessionId时发生错误：credentials参数类型错误\",\n\t\t\t\t\t}, nil\n\t\t\t\t}\n\n\t\t\t\tbaseURLStr, ok := baseURL.(string)\n\t\t\t\tif !ok {\n\t\t\t\t\treturn map[string]interface{}{\n\t\t\t\t\t\t\"success\": true,\n\t\t\t\t\t\t\"message\": \"停止成功，但退出sessionId时发生错误：baseURL参数类型错误\",\n\t\t\t\t\t}, nil\n\t\t\t\t}\n\n\t\t\t\thttpPostFunc, ok := httpPost.(func(string, map[string]interface{}) (map[string]interface{}, error))\n\t\t\t\tif !ok {\n\t\t\t\t\treturn map[string]interface{}{\n\t\t\t\t\t\t\"success\": true,\n\t\t\t\t\t\t\"message\": \"停止成功，但退出sessionId时发生错误：httpPost函数类型错误\",\n\t\t\t\t\t}, nil\n\t\t\t\t}\n\n\t\t\t\t// 退出sessionId\n\t\t\t\tparams := map[string]interface{}{\n\t\t\t\t\t\"v\":         VERSION,\n\t\t\t\t\t\"sessionId\": sessionId,\n\t\t\t\t\t\"method\":    \"user.logout\",\n\t\t\t\t\t\"local\":     LOCALE,\n\t\t\t\t\t\"format\":    FORMAT,\n\t\t\t\t\t\"appKey\":    getStringFromMap(credentialsMap, \"api_key\", \"\"),\n\t\t\t\t}\n\n\t\t\t\t// 生成签名\n\t\t\t\tappSecret := getStringFromMap(credentialsMap, \"api_secret\", \"\")\n\t\t\t\tsign, err := generateSign(params, appSecret)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Printf(\"退出sessionId时发生错误: %v\\n\", err)\n\t\t\t\t} else {\n\t\t\t\t\tparams[\"sign\"] = sign\n\n\t\t\t\t\t// 执行POST请求\n\t\t\t\t\t_, err = httpPostFunc(baseURLStr, params)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tfmt.Printf(\"退出sessionId时发生错误: %v\\n\", err)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfmt.Println(\"退出sessionId成功\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn map[string]interface{}{\n\t\t\"success\": true,\n\t\t\"message\": \"停止成功，sessionId已退出\",\n\t}, nil\n\ndefault:\n\treturn nil, fmt.Errorf(\"不支持的操作类型: %s\", operationStr)\n}\n",
            "script_enabled": true
        },
        "script": "",
        "script_enabled": false,
        "created_at": "2025-09-24T11:04:49.815+08:00",
        "created_by": "admin",
        "updated_at": "2025-09-24T12:15:29.703462+08:00",
        "updated_by": "admin",
        "basic_library": {
            "id": "",
            "name_zh": "",
            "name_en": "",
            "description": "",
            "created_at": "0001-01-01T00:00:00Z",
            "created_by": "",
            "updated_at": "0001-01-01T00:00:00Z",
            "updated_by": "",
            "status": ""
        }
    }
}